//Net Params

N = 1
//Multiply conductance to simulate many neurons
mult_factor = 20

if (name_declared("mat_inh_coupling") == 5) {
inh_coupling = mat_inh_coupling
} else {
inh_coupling = 0.11
}

if (name_declared("mat_d_rge") == 5) {
d_rge = mat_d_rge
} else {
d_rge = 0.45
}

if (name_declared("mat_d_rgf") == 5) {
d_rgf = mat_d_rgf
} else {
d_rgf = 0.5
}

if (name_declared("mat_exc_coupling") == 5) {
exc_coupling = mat_exc_coupling
} else {
exc_coupling = 0.0125
}

if (name_declared("mat_gi_bar") == 5) {
gi_bar = mat_gi_bar
} else {
gi_bar = 0.05e-3
}

if (name_declared("mat_excitation") == 5) {
excitation = mat_excitation
} else {
excitation = 0
}

if (name_declared("mat_inrg_el") == 5) {
inrg_el = mat_inrg_el
} else {
inrg_el = -57.5
}

if (name_declared("mat_rg_el") == 5) {
rg_el = mat_rg_el
} else {
rg_el = -64
}

ge_bar = 0.05e-3

xopen("netbuild")

objref Ia_fibE_stim[N]
objref Ia_fibF_stim[N]
objref Ib_fibE_stim[N]
objref Ib_fibF_stim[N]
objref II_fibE_stim[N]
objref II_fibF_stim[N]

Ia_fibE_stimval = 1
Ia_fibF_stimval = 1
Ib_fibE_stimval = 1
Ib_fibF_stimval = 1
II_fibE_stimval = 1
II_fibF_stimval = 1

for i=0,N-1 {

access Ia_fibE_fiber[i].soma
Ia_fibE_stim[i] = new IClamp(0.5)
Ia_fibE_stim[i].del = 0
Ia_fibE_stim[i].dur = tstop
Ia_fibE_stim[i].amp = 0

access Ia_fibF_fiber[i].soma
Ia_fibF_stim[i] = new IClamp(0.5)
Ia_fibF_stim[i].del = 0
Ia_fibF_stim[i].dur = tstop
Ia_fibF_stim[i].amp = 0

access Ib_fibE_fiber[i].soma
Ib_fibE_stim[i] = new IClamp(0.5)
Ib_fibE_stim[i].del = 0
Ib_fibE_stim[i].dur = tstop
Ib_fibE_stim[i].amp = 0

access Ib_fibF_fiber[i].soma
Ib_fibF_stim[i] = new IClamp(0.5)
Ib_fibF_stim[i].del = 0
Ib_fibF_stim[i].dur = tstop
Ib_fibF_stim[i].amp = 0

access II_fibE_fiber[i].soma
II_fibE_stim[i] = new IClamp(0.5)
II_fibE_stim[i].del = 0
II_fibE_stim[i].dur = tstop
II_fibE_stim[i].amp = 0

access II_fibF_fiber[i].soma
II_fibF_stim[i] = new IClamp(0.5)
II_fibF_stim[i].del = 0
II_fibF_stim[i].dur = tstop
II_fibF_stim[i].amp = 0
}

start_time = 5
dur_time = 0.5
interval_time = 10
STIMON = 0

proc pulses_start() {
// START = $1
	strdef init_str
	sprint(init_str, "%s%4.4f%s", "pulses(", $1, ")")
	//print "I am in pulses_start(), getting ready to call ", init_str
	STIMON = 0 // stimulation off until we get to seti()
	cvode.event(start_time, init_str)
}

proc pulses() {
	strdef seti_str
	sprint(seti_str, "%s%4.4f%s", "pulses(", $1, ")")
	
  if (STIMON==0) { // if we're at an off state,
    STIMON = 1 // turn stimulation on
	//print "I am in pulses() and amplitude is: ", $1
    {
	for i=0,N-1 {
		Ia_fibE_stim[i].amp = Ia_fibE_stimval
		Ia_fibE_stim[i].del = t
		Ia_fibE_stim[i].dur = dur_time
		
		Ia_fibF_stim[i].amp = Ia_fibF_stimval
		Ia_fibF_stim[i].del = t
		Ia_fibF_stim[i].dur = dur_time
		
		Ib_fibE_stim[i].amp = Ib_fibE_stimval
		Ib_fibE_stim[i].del = t
		Ib_fibE_stim[i].dur = dur_time
		
		Ib_fibF_stim[i].amp = Ib_fibF_stimval
		Ib_fibF_stim[i].del = t
		Ib_fibF_stim[i].dur = dur_time
		
		II_fibE_stim[i].amp = II_fibE_stimval
		II_fibE_stim[i].del = t
		II_fibE_stim[i].dur = dur_time
		
		II_fibF_stim[i].amp = II_fibF_stimval
		II_fibF_stim[i].del = t
		II_fibF_stim[i].dur = dur_time
		}
	} // set the extracellular voltage to the values calculated in matlab
    cvode.event(t + dur_time, seti_str) // call seti() after DUR milliseconds have elapsed
  } else { // if we're at an on state,
    STIMON = 0 // turn stimulation off
    cvode.event(t + interval_time, seti_str) // call seti() again after INTERVAL milliseconds have elapsed
  }
  // we've changed a parameter abruptly
  // so we really should re-initialize cvode
  if (cvode.active()) {
    cvode.re_init()
  } else {
    fcurrent()
  }
}

objref fih,fih2
	fih	= new FInitializeHandler("pulses_start(0)")
	fih2 = new FInitializeHandler("preparation()")
	
proc preparation() {	//change default v values, hoc file calls init() after run

for i=0,N-1 {
RG_E_rg_int[i].setel(rg_el+excitation+0.64*r.repick())
RG_F_rg_int[i].setel(rg_el+excitation+0.64*r.repick())
PF_E_rg_int[i].setel(-64+excitation+0.64*r.repick())
PF_F_rg_int[i].setel(-64+excitation+0.64*r.repick())
Inrg_E_int[i].setel(inrg_el+2.875*r.repick())
Inrg_F_int[i].setel(inrg_el+2.875*r.repick())
Inpf_E_int[i].setel(-64+3.2*r.repick())
Inpf_F_int[i].setel(-64+3.2*r.repick())
Irg_E_int[i].setel(-64+3.2*r.repick())
Irg_F_int[i].setel(-64+3.2*r.repick())
Ipf_E_int[i].setel(-64+3.2*r.repick())
Ipf_F_int[i].setel(-64+3.2*r.repick())
Iab_E_int[i].setel(-64+3.2*r.repick())
In_E_int[i].setel(-64+3.2*r.repick())
Ib_E_int[i].setel(-64+3.2*r.repick())
Ib_F_int[i].setel(-64+3.2*r.repick())
Ia_E_int[i].setel(-64+3.2*r.repick())
Ia_F_int[i].setel(-64+3.2*r.repick())
Mn_E_motoneuron[i].setel(-65+3.25*r.repick())
Mn_F_motoneuron[i].setel(-65+3.25*r.repick())
R_E_int[i].setel(-64+3.2*r.repick())
R_F_int[i].setel(-64+3.2*r.repick())

	RG_E_rg_int[i].setv(-80)
	RG_F_rg_int[i].setv(-80)
	PF_E_rg_int[i].setv(-80)
	PF_F_rg_int[i].setv(-80)
	Inrg_E_int[i].setv(-80)
	Inrg_F_int[i].setv(-80)
	Inpf_E_int[i].setv(-80)
	Inpf_F_int[i].setv(-80)
	Irg_E_int[i].setv(-80)
	Irg_F_int[i].setv(-80)
	Ipf_E_int[i].setv(-80)	
	Ipf_F_int[i].setv(-80)
	Iab_E_int[i].setv(-80)
	In_E_int[i].setv(-80)
	Ib_E_int[i].setv(-80)
	Ib_F_int[i].setv(-80)
	Ia_E_int[i].setv(-80)
	Ia_F_int[i].setv(-80)
	R_E_int[i].setv(-80)
	R_F_int[i].setv(-80)

Ia_fibE_fiber[i].setv(-63.84)
Ia_fibF_fiber[i].setv(-63.84)

RG_E_rg_int[i].soma.g_pas = d_rge * 0.05 * 1e-3
RG_F_rg_int[i].soma.g_pas = d_rgf * 0.05 * 1e-3
PF_E_rg_int[i].soma.g_pas = 0.5 * 0.05 * 1e-3
PF_F_rg_int[i].soma.g_pas = 0.5 * 0.05 * 1e-3
}
}

load_file("testing4.ses")
tstop = 30
ena = 55

objref RG_E_v_vec[20]
objref RG_F_v_vec[20]
objref PF_E_v_vec[20]
objref PF_F_v_vec[20]
objref MN_E_v_vec[20]
objref MN_F_v_vec[20]
objref Inrg_E_v_vec[20]
objref Inrg_F_v_vec[20]

for i=0,N-1 {

RG_E_v_vec[i] = new Vector()
RG_E_v_vec[i].record(&RG_E_rg_int[i].soma.v(0.5))
RG_F_v_vec[i] = new Vector()
RG_F_v_vec[i].record(&RG_F_rg_int[i].soma.v(0.5))
PF_E_v_vec[i] = new Vector()
PF_E_v_vec[i].record(&PF_E_rg_int[i].soma.v(0.5))
PF_F_v_vec[i] = new Vector()
PF_F_v_vec[i].record(&PF_F_rg_int[i].soma.v(0.5))
Inrg_E_v_vec[i] = new Vector()
Inrg_E_v_vec[i].record(&Inrg_E_int[i].soma.v(0.5))
Inrg_F_v_vec[i] = new Vector()
Inrg_F_v_vec[i].record(&Inrg_F_int[i].soma.v(0.5))
MN_E_v_vec[i] = new Vector()
MN_E_v_vec[i].record(&Mn_E_motoneuron[i].soma.v(0.5))
MN_F_v_vec[i] = new Vector()
MN_F_v_vec[i].record(&Mn_F_motoneuron[i].soma.v(0.5))

}

init()
run()

objref RG_E_v_file
objref RG_F_v_file
objref PF_E_v_file
objref PF_F_v_file
objref MN_E_v_file
objref MN_F_v_file
objref Inrg_E_v_file
objref Inrg_F_v_file

strdef filename

for i=0,N-1 {

RG_E_v_file = new File()
sprint(filename, "%s%d%s", "RG_E_v_", i,".txt")
RG_E_v_file.wopen(filename)
RG_E_v_vec[i].printf(RG_E_v_file)
RG_E_v_file.close

RG_F_v_file = new File()
sprint(filename, "%s%d%s", "RG_F_v_", i,".txt")
RG_F_v_file.wopen(filename)
RG_F_v_vec[i].printf(RG_F_v_file)
RG_F_v_file.close

PF_E_v_file = new File()
sprint(filename, "%s%d%s", "PF_E_v_", i,".txt")
PF_E_v_file.wopen(filename)
PF_E_v_vec[i].printf(PF_E_v_file)
PF_E_v_file.close

PF_F_v_file = new File()
sprint(filename, "%s%d%s", "PF_F_v_", i,".txt")
PF_F_v_file.wopen(filename)
PF_F_v_vec[i].printf(PF_F_v_file)
PF_F_v_file.close

Inrg_E_v_file = new File()
sprint(filename, "%s%d%s", "INRG_E_v_", i,".txt")
Inrg_E_v_file.wopen(filename)
Inrg_E_v_vec[i].printf(Inrg_E_v_file)
Inrg_E_v_file.close

Inrg_F_v_file = new File()
sprint(filename, "%s%d%s", "INRG_F_v_", i,".txt")
Inrg_F_v_file.wopen(filename)
Inrg_F_v_vec[i].printf(Inrg_F_v_file)
Inrg_F_v_file.close

MN_E_v_file = new File()
sprint(filename, "%s%d%s", "MN_E_v_", i,".txt")
MN_E_v_file.wopen(filename)
MN_E_v_vec[i].printf(MN_E_v_file)
MN_E_v_file.close

MN_F_v_file = new File()
sprint(filename, "%s%d%s", "MN_F_v_", i,".txt")
MN_F_v_file.wopen(filename)
MN_F_v_vec[i].printf(MN_F_v_file)
MN_F_v_file.close
}
