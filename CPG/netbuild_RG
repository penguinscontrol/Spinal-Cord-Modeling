// Artificial cells no longer need a default section.
//Network cell templates
//   RG_E_rg_int
//   RG_F_rg_int
//   PF_E_rg_int
//   PF_F_rg_int
//   Inrg_E_int
//   Inrg_F_int
//   Inpf_E_int
//   Inpf_F_int
//   Ia_E_int
//   Ia_F_int
//   R_E_int
//   R_F_int
//   Irg_E_int
//   Irg_F_int
//   Ipf_E_int
//   Ipf_F_int
//   Iab_E_int
//   In_E_int
//   Ib_E_int
//   Ib_F_int
//   Mn_E_motoneuron
//   Mn_F_motoneuron
//   Ia_fibE_fiber
//   Ia_fibF_fiber
//   Ib_fibE_fiber
//   Ib_fibF_fiber
//   II_fibE_fiber
//   II_fibF_fiber

//load_file("nrngui.hoc") // Brings up the GUI
load_file("noload.hoc") // Does not bring up the GUI, but loads certain function dependencies

begintemplate RG_E_rg_int

xopen("rg_int_template")

objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynE3 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate RG_E_rg_int

begintemplate RG_F_rg_int

xopen("rg_int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynE3 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate RG_F_rg_int

begintemplate PF_E_rg_int

xopen("pf_int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynE3 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate PF_E_rg_int

begintemplate PF_F_rg_int

xopen("pf_int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynE3 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate PF_F_rg_int

begintemplate Inrg_E_int
xopen("inrg_int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Inrg_E_int

begintemplate Inrg_F_int

xopen("inrg_int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Inrg_F_int

begintemplate Inpf_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Inpf_E_int

begintemplate Inpf_F_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Inpf_F_int

begintemplate Ia_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynE3 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Ia_E_int

begintemplate Ia_F_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynE3 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Ia_F_int

begintemplate R_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate R_E_int

begintemplate R_F_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate R_F_int

begintemplate Irg_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Irg_E_int

begintemplate Irg_F_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Irg_F_int

begintemplate Ipf_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Ipf_E_int

begintemplate Ipf_F_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
}
func is_art() { return 0 }

endtemplate Ipf_F_int

begintemplate Iab_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI3 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate Iab_E_int

begintemplate In_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynI0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate In_E_int

begintemplate Ib_E_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate Ib_E_int

begintemplate Ib_F_int

xopen("int_template")
objref syn_
proc synapses() {
  /* SynE0 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI2 */   soma syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate Ib_F_int

begintemplate Mn_E_motoneuron

xopen("motoneuron_template")
objref syn_
proc synapses() {
  /* SynE0 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE2 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI3 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynI4 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate Mn_E_motoneuron

begintemplate Mn_F_motoneuron

xopen("motoneuron_template")
objref syn_
proc synapses() {
  /* SynE0 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynE1 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -10
  /* SynI2 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
  /* SynI3 */   dend syn_ = new ExpSynR(0.5)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -70
}
func is_art() { return 0 }

endtemplate Mn_F_motoneuron

begintemplate Ia_fibE_fiber

xopen("fiber_template")
objref syn_
proc synapses() {
}
func is_art() { return 0 }

endtemplate Ia_fibE_fiber

begintemplate Ia_fibF_fiber

xopen("fiber_template")
objref syn_
proc synapses() {
}
func is_art() { return 0 }

endtemplate Ia_fibF_fiber

begintemplate Ib_fibE_fiber

xopen("fiber_template")
objref syn_
proc synapses() {
}
func is_art() { return 0 }

endtemplate Ib_fibE_fiber

begintemplate Ib_fibF_fiber

xopen("fiber_template")
objref syn_
proc synapses() {
}
func is_art() { return 0 }

endtemplate Ib_fibF_fiber

begintemplate II_fibE_fiber

xopen("fiber_template")
objref syn_
proc synapses() {
}
func is_art() { return 0 }

endtemplate II_fibE_fiber

begintemplate II_fibF_fiber

xopen("fiber_template")
objref syn_
proc synapses() {
}
func is_art() { return 0 }

endtemplate II_fibF_fiber

//Network specification interface

objref cells, nclist, netcon
{cells = new List()  nclist = new List()}

func cell_append() {cells.append($o1)  $o1.position($2,$3,$4)
	return cells.count - 1
}

func nc_append() {//srcindex, tarcelindex, synindex
  if ($3 >= 0) {
    netcon = cells.object($1).connect2target(cells.object($2).synlist.object($3))
    netcon.weight = $4   netcon.delay = $5
  }else{
    netcon = cells.object($1).connect2target(cells.object($2).pp)
    netcon.weight = $4   netcon.delay = $5
  }
  nclist.append(netcon)
  return nclist.count - 1
}

objref r
r = new Random()

//Network instantiation
for i=0,N-1 {
//print "i = ", i
  /* RG_E0 */  cell_append(new RG_E_rg_int(),	-47,	 216, 0)
  /* RG_F1 */  cell_append(new RG_F_rg_int(),	118,	 213, 0)
  /* PF_E2 */  cell_append(new PF_E_rg_int(),	-44,	 136, 0)
  /* PF_F3 */  cell_append(new PF_F_rg_int(),	116,	 143, 0)
  /* Inrg_E4 */  cell_append(new Inrg_E_int(),	-5,	 179, 0)
  /* Inrg_F5 */  cell_append(new Inrg_F_int(),	70,	 178, 0)
}

for i=0,N-1 {
for j=0,N-1 {
  /* RG_E0 -> RG_E0.SynE0 */       nc_append(0+6*j ,   0+6*i , 0,  exc_coupling*ge_bar,1)
  /* RG_F1 -> RG_E0.SynE1 */       nc_append(1+6*j ,   0+6*i , 1,  exc_coupling*ge_bar,1)
  /* Inrg_E4 -> RG_E0.SynI2 */     nc_append(4+6*j ,   0+6*i , 2,  inh_coupling*gi_bar,1)
  
  /* RG_E0 -> RG_F1.SynE0 */       nc_append(0+6*j ,   1+6*i , 0,  exc_coupling*ge_bar,1)
  /* RG_F1 -> RG_F1.SynE1 */       nc_append(1+6*j ,   1+6*i , 1,  exc_coupling*ge_bar,1)
  /* Inrg_F5 -> RG_F1.SynI2 */     nc_append(5+6*j ,   1+6*i , 2,  inh_coupling*gi_bar,1)
  
  /* RG_F1 -> Inrg_E4.SynE0 */     nc_append(1+6*j ,   4+6*i , 0,  0.45*ge_bar,1)
  /* RG_E0 -> Inrg_F5.SynE0 */     nc_append(0+6*j ,   5+6*i , 0,  0.45*ge_bar,1)
 
}
}
