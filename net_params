objref c_file // an object called c_file exists
c_file = new File() // c_file is a pointer to a file in memory

strdef params_file 
sprint(params_file, "%s%s", tempdata_address, "cell_params")

//print params_file
c_file.ropen(params_file) // give it the name of the file and open for reading

objref c_vars
c_vars = new Vector()
c_vars.fread(c_file,13,4)
// Close the file
c_file.close

//note that all parameters are in tempdata directory!!

mat_n_nodes = c_vars.x[0] // save the first number to a variable

start_time = c_vars.x[1] // save the second number...
dur_time = c_vars.x[2]
interval_time = c_vars.x[3]

mat_diam = c_vars.x[4]
mat_l = mat_diam // nodes are as long as they are wide
mat_inl = c_vars.x[5] // internodes are inl times the size of nodes

mat_ppn = c_vars.x[6] // points per node

mat_start_amp = c_vars.x[7] //init amp input from matlab
mat_step = c_vars.x[8] //step size input from matlab
mat_amp = c_vars.x[9] //max amplitude input from matlab

mn_pos_x = c_vars.x[10]
mn_pos_y = c_vars.x[11]
mn_pos_z = c_vars.x[12]

n_amps = (mat_amp - mat_start_amp)/mat_step + 1

objref stim_amps
stim_amps = new Vector(n_amps)
stim_amps.x[0] = mat_start_amp
//print "n amps =  ", n_amps
if (n_amps > 1) {
	for(ii=1; ii < n_amps; ii+=1)  {
		//print "Making amp vector, ii = ", ii
		stim_amps.x[ii] = stim_amps.x[ii-1] + mat_step
	}
}

/*
Here we are declaring functions that return the values of variables read in from the text file. If for some reason
we didn't declare any one of them in the file, the function instead returns some default value. This is because variables
were not visible inside the cell type template files.
*/

func n_nodes(){ // how many nodes are we simulating for our fiber?
//print "n_nodes() = ", mat_n_nodes
	return mat_n_nodes
}

func get_diam(){ // what is the diameter of a node?
	return mat_diam
}

func get_L(){ // how long is a node
	return mat_diam
}

func get_INL(){ // how many times longer is a node than a paranode? (the Inter Node Length)
	return mat_inl
}